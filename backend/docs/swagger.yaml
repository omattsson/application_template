basePath: /
definitions:
  health.CheckStatus:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  health.HealthStatus:
    properties:
      checks:
        additionalProperties:
          $ref: '#/definitions/health.CheckStatus'
        type: object
      status:
        type: string
      uptime:
        type: string
    type: object
  models.Item:
    properties:
      created_at:
        example: "2025-06-02T10:00:00Z"
        type: string
      deleted_at:
        format: date-time
        type: string
      id:
        example: 1
        type: integer
      name:
        type: string
      price:
        type: number
      updated_at:
        example: "2025-06-02T10:00:00Z"
        type: string
      version:
        description: For optimistic locking
        type: integer
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is the API documentation for the backend service
  title: Backend API
  version: "1.0"
paths:
  /api/v1/items:
    get:
      description: Get a list of all items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
      summary: Get all items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create a new item with the provided information
      parameters:
      - description: Item object
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new item
      tags:
      - items
  /api/v1/items/{id}:
    delete:
      description: Delete an item by its ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete an item
      tags:
      - items
    get:
      description: Get an item by its ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get an item by ID
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update an item's information
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item object
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an item
      tags:
      - items
  /api/v1/ping:
    get:
      description: Ping test endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ping test
      tags:
      - ping
  /health:
    get:
      description: Get API health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - health
  /health/live:
    get:
      description: Get API liveness status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.HealthStatus'
      summary: Liveness Check
      tags:
      - health
  /health/ready:
    get:
      description: Get API readiness status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.HealthStatus'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/health.HealthStatus'
      summary: Readiness Check
      tags:
      - health
swagger: "2.0"
